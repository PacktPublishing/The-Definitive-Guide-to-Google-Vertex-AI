{
  "pipelineSpec": {
    "components": {
      "comp-condition-deploy-winequality-1": {
        "dag": {
          "tasks": {
            "deploy-winequality": {
              "cachingOptions": {
                "enableCache": true
              },
              "componentRef": {
                "name": "comp-deploy-winequality"
              },
              "inputs": {
                "artifacts": {
                  "model": {
                    "componentInputArtifact": "pipelineparam--train-winequality-model"
                  }
                },
                "parameters": {
                  "project": {
                    "componentInputParameter": "pipelineparam--project"
                  },
                  "region": {
                    "componentInputParameter": "pipelineparam--region"
                  },
                  "serving_container_image_uri": {
                    "componentInputParameter": "pipelineparam--serving_container_image_uri"
                  }
                }
              },
              "taskInfo": {
                "name": "deploy-winequality"
              }
            }
          }
        },
        "inputDefinitions": {
          "artifacts": {
            "pipelineparam--train-winequality-model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "pipelineparam--project": {
              "type": "STRING"
            },
            "pipelineparam--region": {
              "type": "STRING"
            },
            "pipelineparam--serving_container_image_uri": {
              "type": "STRING"
            },
            "pipelineparam--winequality-evaluation-deploy": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-deploy-winequality": {
        "executorLabel": "exec-deploy-winequality",
        "inputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "project": {
              "type": "STRING"
            },
            "region": {
              "type": "STRING"
            },
            "serving_container_image_uri": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "vertex_endpoint": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "vertex_model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-get-wine-data": {
        "executorLabel": "exec-get-wine-data",
        "inputDefinitions": {
          "parameters": {
            "url": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "dataset_test": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "dataset_train": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-train-winequality": {
        "executorLabel": "exec-train-winequality",
        "inputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-winequality-evaluation": {
        "executorLabel": "exec-winequality-evaluation",
        "inputDefinitions": {
          "artifacts": {
            "rf_winequality_model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            },
            "test_set": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "thresholds_dict_str": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "kpi": {
              "artifactType": {
                "schemaTitle": "system.Metrics",
                "schemaVersion": "0.0.1"
              }
            },
            "metrics": {
              "artifactType": {
                "schemaTitle": "system.ClassificationMetrics",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "deploy": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-deploy-winequality": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "deploy_winequality"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform' 'scikit-learn' 'kfp' 'kfp==1.8.21' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef deploy_winequality(\n    model: Input[Model],\n    project: str,\n    region: str,\n    serving_container_image_uri : str, \n    vertex_endpoint: Output[Artifact],\n    vertex_model: Output[Model]\n):\n    from google.cloud import aiplatform\n    aiplatform.init(project=project, location=region)\n\n    DISPLAY_NAME  = \"winequality\"\n    MODEL_NAME = \"winequality-rf\"\n    ENDPOINT_NAME = \"winequality_endpoint\"\n\n    def create_endpoint():\n        endpoints = aiplatform.Endpoint.list(\n        filter='display_name=\"{}\"'.format(ENDPOINT_NAME),\n        order_by='create_time desc',\n        project=project, \n        location=region,\n        )\n        if len(endpoints) > 0:\n            endpoint = endpoints[0]  # most recently created\n        else:\n            endpoint = aiplatform.Endpoint.create(\n            display_name=ENDPOINT_NAME, project=project, location=region\n        )\n    endpoint = create_endpoint()   \n\n    #Import a model programmatically\n    model_upload = aiplatform.Model.upload(\n        display_name = DISPLAY_NAME, \n        artifact_uri = model.uri.replace(\"model\", \"\"),\n        serving_container_image_uri =  serving_container_image_uri,\n        serving_container_health_route=f\"/v1/models/{MODEL_NAME}\",\n        serving_container_predict_route=f\"/v1/models/{MODEL_NAME}:predict\",\n        serving_container_environment_variables={\n        \"MODEL_NAME\": MODEL_NAME,\n    },       \n    )\n    model_deploy = model_upload.deploy(\n        machine_type=\"n1-standard-4\", \n        endpoint=endpoint,\n        traffic_split={\"0\": 100},\n        deployed_model_display_name=DISPLAY_NAME,\n    )\n\n    # Save data to the output params\n    vertex_model.uri = model_deploy.resource_name\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-get-wine-data": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "get_wine_data"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'pyarrow' 'scikit-learn==1.0.0' 'kfp==1.8.21' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef get_wine_data(\n    url: str,\n    dataset_train: Output[Dataset],\n    dataset_test: Output[Dataset]\n):\n    import pandas as pd\n    import numpy as np\n    from sklearn.model_selection import train_test_split as tts\n\n    df_wine = pd.read_csv(url, delimiter=\";\")\n    df_wine['best_quality'] = [1 if x>=7 else 0 for x in df_wine.quality] \n    df_wine['target'] = df_wine.best_quality\n    df_wine = df_wine.drop(\n        ['quality', 'total sulfur dioxide', 'best_quality'],\n         axis=1,\n    )\n    train, test = tts(df_wine, test_size=0.3)\n    train.to_csv(\n        dataset_train.path + \".csv\",\n        index=False, \n        encoding='utf-8-sig',\n    )\n    test.to_csv(\n        dataset_test.path + \".csv\",\n        index=False,\n        encoding='utf-8-sig',\n    )\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-train-winequality": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "train_winequality"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'scikit-learn' 'kfp==1.8.21' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef train_winequality(\n    dataset:  Input[Dataset],\n    model: Output[Model], \n):\n    from sklearn.ensemble import RandomForestClassifier\n    import pandas as pd\n    import pickle\n\n    data = pd.read_csv(dataset.path+\".csv\")\n    model_rf = RandomForestClassifier(n_estimators=10)\n    model_rf.fit(\n        data.drop(columns=[\"target\"]),\n        data.target,\n    )\n    model.metadata[\"framework\"] = \"RF\"\n    file_name = model.path + f\".pkl\"\n    with open(file_name, 'wb') as file:  \n        pickle.dump(model_rf, file)\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-winequality-evaluation": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "winequality_evaluation"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'scikit-learn' 'kfp==1.8.21' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef winequality_evaluation(\n    test_set:  Input[Dataset],\n    rf_winequality_model: Input[Model],\n    thresholds_dict_str: str,\n    metrics: Output[ClassificationMetrics],\n    kpi: Output[Metrics]\n) -> NamedTuple(\"output\", [(\"deploy\", str)]):\n\n    from sklearn.ensemble import RandomForestClassifier\n    import pandas as pd\n    import logging \n    import pickle\n    from sklearn.metrics import roc_curve, confusion_matrix, accuracy_score\n    import json\n    import typing\n\n    def threshold_check(val1, val2):\n        cond = \"false\"\n        if val1 >= val2 :\n            cond = \"true\"\n        return cond\n\n    data = pd.read_csv(test_set.path+\".csv\")\n    model = RandomForestClassifier()\n    file_name = rf_winequality_model.path + \".pkl\"\n    with open(file_name, 'rb') as file:  \n        model = pickle.load(file)\n\n    y_test = data.drop(columns=[\"target\"])\n    y_target=data.target\n    y_pred = model.predict(y_test)\n\n    y_scores =  model.predict_proba(\n        data.drop(columns=[\"target\"])\n    )[:, 1]\n    fpr, tpr, thresholds = roc_curve(\n         y_true=data.target.to_numpy(),\n        y_score=y_scores, pos_label=True\n    )\n    metrics.log_roc_curve(\n        fpr.tolist(), \n        tpr.tolist(), \n        thresholds.tolist()\n    )  \n\n    metrics.log_confusion_matrix(\n       [\"False\", \"True\"],\n       confusion_matrix(\n           data.target, y_pred\n       ).tolist(), \n    )\n\n    accuracy = accuracy_score(data.target, y_pred.round())\n    thresholds_dict = json.loads(thresholds_dict_str)\n    rf_winequality_model.metadata[\"accuracy\"] = float(accuracy)\n    kpi.log_metric(\"accuracy\", float(accuracy))\n    deploy = threshold_check(float(accuracy), int(thresholds_dict['roc']))\n    return (deploy,)\n\n"
            ],
            "image": "python:3.9"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "pipeline-winequality"
    },
    "root": {
      "dag": {
        "outputs": {
          "artifacts": {
            "winequality-evaluation-kpi": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "kpi",
                  "producerSubtask": "winequality-evaluation"
                }
              ]
            },
            "winequality-evaluation-metrics": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "metrics",
                  "producerSubtask": "winequality-evaluation"
                }
              ]
            }
          }
        },
        "tasks": {
          "condition-deploy-winequality-1": {
            "componentRef": {
              "name": "comp-condition-deploy-winequality-1"
            },
            "dependentTasks": [
              "train-winequality",
              "winequality-evaluation"
            ],
            "inputs": {
              "artifacts": {
                "pipelineparam--train-winequality-model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "train-winequality"
                  }
                }
              },
              "parameters": {
                "pipelineparam--project": {
                  "componentInputParameter": "project"
                },
                "pipelineparam--region": {
                  "componentInputParameter": "region"
                },
                "pipelineparam--serving_container_image_uri": {
                  "componentInputParameter": "serving_container_image_uri"
                },
                "pipelineparam--winequality-evaluation-deploy": {
                  "taskOutputParameter": {
                    "outputParameterKey": "deploy",
                    "producerTask": "winequality-evaluation"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "condition-deploy-winequality-1"
            },
            "triggerPolicy": {
              "condition": "inputs.parameters['pipelineparam--winequality-evaluation-deploy'].string_value == 'true'"
            }
          },
          "get-wine-data": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-get-wine-data"
            },
            "inputs": {
              "parameters": {
                "url": {
                  "componentInputParameter": "url"
                }
              }
            },
            "taskInfo": {
              "name": "get-wine-data"
            }
          },
          "train-winequality": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-train-winequality"
            },
            "dependentTasks": [
              "get-wine-data"
            ],
            "inputs": {
              "artifacts": {
                "dataset": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset_train",
                    "producerTask": "get-wine-data"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "train-winequality"
            }
          },
          "winequality-evaluation": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-winequality-evaluation"
            },
            "dependentTasks": [
              "get-wine-data",
              "train-winequality"
            ],
            "inputs": {
              "artifacts": {
                "rf_winequality_model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "train-winequality"
                  }
                },
                "test_set": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "dataset_test",
                    "producerTask": "get-wine-data"
                  }
                }
              },
              "parameters": {
                "thresholds_dict_str": {
                  "componentInputParameter": "thresholds_dict_str"
                }
              }
            },
            "taskInfo": {
              "name": "winequality-evaluation"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "api_endpoint": {
            "type": "STRING"
          },
          "display_name": {
            "type": "STRING"
          },
          "project": {
            "type": "STRING"
          },
          "region": {
            "type": "STRING"
          },
          "serving_container_image_uri": {
            "type": "STRING"
          },
          "thresholds_dict_str": {
            "type": "STRING"
          },
          "url": {
            "type": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "winequality-evaluation-kpi": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          },
          "winequality-evaluation-metrics": {
            "artifactType": {
              "schemaTitle": "system.ClassificationMetrics",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.21"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "gs://my-training-artifacts",
    "parameters": {
      "api_endpoint": {
        "stringValue": "us-west2-aiplatform.googleapis.com"
      },
      "display_name": {
        "stringValue": "pipeline-winequality-job20230506151813"
      },
      "project": {
        "stringValue": "417812395597"
      },
      "region": {
        "stringValue": "us-west2"
      },
      "serving_container_image_uri": {
        "stringValue": "us-docker.pkg.dev/vertex-ai/prediction/sklearn-cpu.0-24:latest"
      },
      "thresholds_dict_str": {
        "stringValue": "{\"roc\":0.8}"
      },
      "url": {
        "stringValue": "http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"
      }
    }
  }
}